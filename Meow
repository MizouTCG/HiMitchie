import javax.swing.*;
import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.Stack;

public class MitsiCalc extends JFrame {
    private JTextField display;
    private JButton button7, button8, button9, buttonDivide;
    private JButton button4, button5, button6, buttonMultiply;
    private JButton button1, button2, button3, buttonSubtract;
    private JButton buttonClear, button0, buttonEqual, buttonAdd;
    private JButton buttonDot, Meow;
    private String currentExpression = "";

    public MitsiCalc() {
        try {
            UIManager.setLookAndFeel("javax.swing.plaf.nimbus.NimbusLookAndFeel");
        } catch (Exception e) {
            e.printStackTrace();
        }
        SwingUtilities.updateComponentTreeUI(this);

        setTitle("Bagaporo Simple Calculator");
        setBounds(600, 170, 650, 420);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(null);
        getContentPane().setBackground(new Color(175,175,175));
        setResizable(false);

        display = new JTextField();
        display.setEditable(false);
        display.setBounds(50, 20, 540, 50);
        display.setFont(new Font("Arial", Font.BOLD, 24));
        display.setHorizontalAlignment(JTextField.RIGHT);
        add(display);

        button7 = new JButton("7"); button7.setBounds(50, 90, 100, 60);
        button8 = new JButton("8"); button8.setBounds(160, 90, 100, 60);
        button9 = new JButton("9"); button9.setBounds(270, 90, 100, 60);
        buttonDivide = new JButton("/"); buttonDivide.setBounds(380, 90, 100, 60);
        buttonAdd = new JButton("+"); buttonAdd.setBounds(490, 90, 100, 60); 

        button4 = new JButton("4"); button4.setBounds(50, 160, 100, 60);
        button5 = new JButton("5"); button5.setBounds(160, 160, 100, 60);
        button6 = new JButton("6"); button6.setBounds(270, 160, 100, 60);
        buttonMultiply = new JButton("*"); buttonMultiply.setBounds(380, 160, 100, 60);
        buttonDot = new JButton("."); buttonDot.setBounds(490, 160, 100, 60); 

        button1 = new JButton("1"); button1.setBounds(50, 230, 100, 60);
        button2 = new JButton("2"); button2.setBounds(160, 230, 100, 60);
        button3 = new JButton("3"); button3.setBounds(270, 230, 100, 60);
        buttonSubtract = new JButton("-"); buttonSubtract.setBounds(380, 230, 100, 60);
        buttonEqual = new JButton("="); buttonEqual.setBounds(490, 230, 100, 60); 

        buttonClear = new JButton("Clear"); buttonClear.setBounds(50, 300, 150, 60); 
        button0 = new JButton("0"); button0.setBounds(210, 300, 150, 60); 
        Meow = new JButton("Meow"); Meow.setBounds(370, 300, 150, 60);
        
        JButton[] buttons = {button7, button8, button9, buttonDivide, button4, button5, button6, buttonMultiply, button1, button2, button3, buttonSubtract, buttonClear, button0, buttonEqual, buttonAdd, buttonDot, Meow};
        for (JButton button : buttons) {
            button.setBackground(new Color(23, 23, 23)); 
            button.setForeground(Color.white);
            button.setFont(new Font("Arial", Font.BOLD, 18));
            add(button);
            button.addActionListener(new ButtonClickListener());
        }
    }

    private class ButtonClickListener implements ActionListener {
        public void actionPerformed(ActionEvent e) {
            String command = e.getActionCommand();
            if (command.equals("Clear")) {
                currentExpression = "";
            } else if (command.equals("=")) {
                try {
                    double result = evaluateExpression(currentExpression);
                    if (result == (int) result) {
                        currentExpression = String.valueOf((int) result);
                    } else {
                        currentExpression = String.valueOf(result);
                    }
                } catch (Exception ex) {
                    currentExpression = "Error";
                }
            } else if (command.equals("Meow")) {
                currentExpression += "Miau"; //Meow
            } else {
                currentExpression += command;
            }
            display.setText(currentExpression);
        }
    }

    private double evaluateExpression(String expression) {
        Stack<Double> numbers = new Stack<>();
        Stack<Character> operators = new Stack<>();
        StringBuilder numBuffer = new StringBuilder();

        for (char c : expression.toCharArray()) {
            if (Character.isDigit(c) || c == '.') {
                numBuffer.append(c);
            } else {
                if (numBuffer.length() > 0) {
                    numbers.push(Double.parseDouble(numBuffer.toString()));
                    numBuffer.setLength(0);
                }
                while (!operators.isEmpty() && precedence(operators.peek()) >= precedence(c)) {
                    numbers.push(applyOperation(operators.pop(), numbers.pop(), numbers.pop()));
                }
                operators.push(c);
            }
        }

        if (numBuffer.length() > 0) {
            numbers.push(Double.parseDouble(numBuffer.toString()));
        }

        while (!operators.isEmpty()) {
            numbers.push(applyOperation(operators.pop(), numbers.pop(), numbers.pop()));
        }

        return numbers.pop();
    }

    private int precedence(char operator) {
        return (operator == '+' || operator == '-') ? 1 : (operator == '*' || operator == '/') ? 2 : -1;
    }

    private double applyOperation(char operator, double b, double a) {
        switch (operator) {
            case '+': return a + b;
            case '-': return a - b;
            case '*': return a * b;
            case '/': return a / b;
            default: return 0;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new MitsiCalc().setVisible(true));
    }
}
